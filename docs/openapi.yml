openapi: 3.0.0
info:
  title: Express Ts Starter
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: auth
  - name: profile
  - name: user
  - name: note
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: admin@mail.com
                password: admin123
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/logout:
    post:
      tags:
        - auth
      summary: logout
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/refresh_token:
    post:
      tags:
        - auth
      summary: refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                refreshToken: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsdjB2djNlaDAwMDJ3dmUzYmFkczJxNTUiLCJpYXQiOjE3MTMyNDI1MjUsImV4cCI6MTcxNDQ1MjEyNX0.333nCz2vs8KMuHBtchEXjAnRckFNdTdBBtNrPiU7k_s
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /register:
    post:
      tags:
        - auth
      summary: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: New Member
                email: newmember@mail.com
                password: admin123
                confirm: admin123
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /profile:
    get:
      tags:
        - profile
      summary: get profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - profile
      summary: change profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Hello Member
                changePassword: false
                old: admin123
                password: admin1234
                confirm: admin1234
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /profile/photo:
    put:
      tags:
        - profile
      summary: change photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users:
    get:
      tags:
        - user
      summary: gets user
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - user
      summary: create user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: new admin
                email: newadmin2@mail.com
                role: admin
                password: admin123
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/{userId}:
    get:
      tags:
        - user
      summary: get user
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
          example: clv1wggwb0000y5i85f7erejr
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - user
      summary: update user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: new member update
                email: newmember@mail.com
                photo: ''
                enable: true
                role: member
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
          example: clv217llk000113752lq7e2jd
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - user
      summary: delete user
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
          example: clv217llk000113752lq7e2jd
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notes:
    get:
      tags:
        - note
      summary: gets note
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - note
      summary: create note
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Test Note
                content: Content test note
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notes/{noteId}:
    get:
      tags:
        - note
      summary: get note
      parameters:
        - name: noteId
          in: path
          schema:
            type: string
          required: true
          example: clv0vv3eh0004wve3uk3zvuop
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - note
      summary: update note
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Test Note Update
                content: Content test note update
      parameters:
        - name: noteId
          in: path
          schema:
            type: string
          required: true
          example: clv0vv3eh0004wve3uk3zvuop
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - note
      summary: delete note
      parameters:
        - name: noteId
          in: path
          schema:
            type: string
          required: true
          example: clv0vv3eh0004wve3uk3zvuop
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /:
    get:
      tags:
        - default
      summary: hello
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
